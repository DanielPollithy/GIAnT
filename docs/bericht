

Zwischenbericht zur Bachelorarbeit von Daniel Pollithy am 12.
Jun. 2017

Fortschritt der Entwicklung
einer Graph-Datenbank-basierten Desktopanwendung zur Transliteration von „Scritte“

 

Vorgeschichte

In Absprache mit Prof. Dr. Krefeld, seinem Doktoranden
Sebastian Lasch und Prof. Dr. Böhm wurden Anfang April die Weichen für die
Bachelorarbeit geschaffen. 

Erklärtes Ziel ist es, eine Anwendung zu entwickeln, mit der
Sebastian im Rahmen seiner Dissertation den aufgebauten Korpus an Bildern von „Scritte
murali“ aus Rom analysieren kann.

Neben intensivem E-Mail-Kontakt und Skype-Telefonaten haben
mittlerweile einige persönliche Treffen stattgefunden. Dieser starke Austausch
ist sehr wichtig, damit die Software den sich entwickelnden Anforderungen des
Anwenders entsprechen kann. Es wurden bisher zu keinem Punkt Anforderungen
eingefroren, sondern Feature entwickelt, abgesprochen und verbessert. Diese Art
der Softwareentwicklung scheint angebracht, da sich die Anforderungen mit dem
Fortschritt Sebastians Dissertation weiterentwickelt haben.

Beschreibung der Anwendung

Eine Beschreibung der gewünschten Anwendung in Kürze aus
Sicht eines Benutzers:

Man lädt ein Bild hoch und kann auf jedem
Bild mehrere „Scritte“ erstellen (Fragmente). Man zieht auf dem Bild Boxen, die
man miteinander verbinden kann. Die Boxen können Attribute haben und von
unterschiedlichen Typen sein, zum Beispiel Token, Symbole. Die Verbindungen
zwischen den Boxen beschreiben etwaige Modifikationen, zum Beispiel Überstreichungen
oder Zustimmungen.

Es gibt immer mehrere Akteure, die als
Hände bezeichnet werden. Sie haben eine chronologische Reihenfolge. Jede Box
gehört zu einer Hand.

Das transliterierte Bild kann auf
Knopfdruck in die Graph-Datenbank überführt werden. Dort sollen auch alle
vergebenen Attribute, wie zum Beispiel „Farbe“ oder „Werkzeug“, ankommen.

Man soll ein Fragment als „fertig“
markieren können und es muss einen Button geben, der alle „fertigen“ Fragmente
in die Datenbank überträgt.

Die EXIF-Daten der Fotos und falls nicht
vorhanden, zumindest die Abmessungen des Fotos sollen auch abgespeichert
werden.

Es soll Gruppen geben (zum Beispiel für
psychologische Frames oder Kommentare), die die Fragment-Graphen miteinander
verknüpfen. 

Es soll eine Möglichkeit geben, Heatmaps von
Tokens zu erstellen, um die Verteilung, Form oder Dichte von bestimmten „Scritte“
graphisch analysieren zu können.

 

 

 

Es folgt eine Auflistung von technischen Anforderungen, die
an die Anwendung gestellt werden, gefolgt von den Strategien, mit denen diesen
begegnet wird.


 
  
  Anforderung
  
  
  Strategie
  
 
 
  
  Die Anwendung soll verlässlich sein. 
  
  
  Die Software enthält automatisierte Unit-, Integration- und
  Frontendtest, welche das Datenmodell, den Programmcode und die Funktionalitäten
  der Benutzeroberfläche testen.
  
 
 
  
  Die Anwendung soll gut benutzbar sein und keine
  Fehler haben.
  
  
  Es ist geplant, dass insgesamt drei alpha- und ein beta- Versionstest
  stattfinden, bei denen Menschen die Software anhand von unterschiedliche
  Anwendungsfälle durchtesten werden. Der erste alpha-Test wurde bereits von Sebastian
  durchgeführt. Er hat dabei vier fehlerhafte Funktionen identifizieren können
  und drei zusätzliche Anforderungen formuliert.
  
 
 
  
  Die Daten der Anwendung sollen der weiteren Verarbeitung
  (z.B. durch relationalen Datenbanken) zur Verfügung gestellt werden.
  
  
  Es wird einen SQL-Export geben, um die datenbank-gestützte
  Weiterverarbeitung zu ermöglichen.
  Des Weiteren ist ein CSV-Export geplant, um die Daten Programmen, wie
  zum Beispiel dem Part-Of-Speech-Tagger, einfach zur Verfügung stellen zu
  können.
  
 
 
  
  Die Daten der Anwendung sollen der IT-Gruppe der
  Geisteswissenschaften wohl formatiert zur Verfügung gestellt werden.
  
  
  Es hat ein gemeinsames Treffen im Büro der ITG stattgefunden. Der
  Konsens war, dass die ITG sich eine Instanz der verwendeten Graph-Datenbank
  aufsetzen wird, um die geplante Webanwendung mit Daten zu beliefern.
  Aufgabe der Anwendung muss es also sein, die Daten aus der lokalen
  Graph-Datenbank auf eine entfernte (über das Internet erreichbare)
  Graph-Datenbank überspielen zu können.
  Die Übertragung der Bilddateien wird manuell vorgenommen.
  
 
 
  
  Die Anwendung soll wiederverwendbar sein.
  
  
  Die Analysemöglichkeit, die diese Software zur Verfügung stellen wird,
  ist eventuell auch für andere Wissenschaftler interessant. Daher soll die
  Software generell gehalten werden, damit sie flexibel einsetzbar bleibt.
  Damit die Software universeller ist, kann sie als Electron-App für
  alle gängigen Betriebssysteme zur Verfügung gestellt werden.
  Des Weiteren wird eine umfassende Dokumentation für Anwender zur
  Verfügung gestellt. Bildschirmvideos, Installationsanweisungen und FAQs sind
  geplant.
  
 
 
  
  Die Anwendung soll gut dokumentiert sein.
  
  
  Damit zusätzliche Programmiererinnen und Programmierer es leichter
  haben, die Software zu verstehen, neue Feature hinzuzufügen oder eine neue
  Version zu veröffentlichen, wird es eine umfassende Dokumentation des
  Programmcodes, des Datenbankschemas, der Benutzeroberfläche, des „Deployment“-Verfahrens,
  der De- und Encodierungsfunktionen in Englisch geben.
  Diese wird auf readthedocs öffentlich Verfügbar sein.
  
 
 
  
  Es wird minimal „open source“ Software
  verwendet. Bevorzugt jedoch „freie“ Software.
  
  
  Alle verwendeten Software-Komponenten erfüllen diese Anforderungen
  (siehe LICENCES.txt im Repo).
  Auch diese Software wird dann unter der GPL-v3 verfügbar sein.
  
 


 

 

Entwicklungsstand

Seit dem 9. April wurden 125 Commits auf dem
Github-Repository eingecheckt und 47 Issues geschlossen. Es wurde der erste von
drei alpha-Tests durchgeführt.

Es sind derzeit 20 Issues offen und noch zwei wichtige
Anforderungen nicht konkret formuliert (Überführung in die textuelle
Modifikationsform und die Exportfunktion).

 

Roadmap

In der Woche vom 19. – 25. Juni soll die zweite
alpha-Testphase stattfinden. Währenddessen sollen alle fehlenden Anforderungen
erarbeitet werden. 

In der Woche vom 3. – 9. Juli soll dann die letzte Alpha-Testphase
durchgeführt werden. An diesem Test soll bereits eine größere Testgruppe
teilnehmen. Danach werden die Anforderungen für die Version 1.0.0 festgesetzt.

Der Beta-Test soll am 12. Juli beginnen. Etwaige auftretende
Fehler werden korrigiert, aber keine weitere Feature mehr implementiert. 

Auf Basis dieser Planung erscheint der 16. Juli (nach circa
drei Monate Entwicklung) ein sinnvolles Zieldatum für den stable-release der „TransliterationApplication“.

 

Ausarbeitung der Bachelorarbeit

Von da wird die B

